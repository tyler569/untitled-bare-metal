// This file is autogenerated by './gen.rb'. Do not edit.

#pragma once

#include "sys/syscall.h"

static inline word_t get_mr (word_t index);
static inline void set_mr (word_t index, word_t value);
static inline cptr_t get_cap (word_t index);
static inline void set_cap (word_t index, cptr_t value);

static inline int
ubm_CNode_Copy (cptr_t obj, word_t dest_index, uint8_t dest_depth,
                cptr_t src_root, word_t src_index, uint8_t src_depth,
                cap_rights_t rights)
{
  set_mr (0, (word_t)dest_index);
  set_mr (1, (word_t)dest_depth);
  set_mr (2, (word_t)src_index);
  set_mr (3, (word_t)src_depth);
  set_mr (4, (word_t)rights);
  set_cap (0, src_root);
  message_info_t _info = new_message_info (METHOD_CNode_Copy, 0, 1, 5);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_CNode_Delete (cptr_t obj, word_t index, uint8_t depth)
{
  set_mr (0, (word_t)index);
  set_mr (1, (word_t)depth);

  message_info_t _info = new_message_info (METHOD_CNode_Delete, 0, 0, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_CNode_Mint (cptr_t obj, word_t dest_index, uint8_t dest_depth,
                cptr_t src_root, word_t src_index, uint8_t src_depth,
                cap_rights_t rights, word_t badge)
{
  set_mr (0, (word_t)dest_index);
  set_mr (1, (word_t)dest_depth);
  set_mr (2, (word_t)src_index);
  set_mr (3, (word_t)src_depth);
  set_mr (4, (word_t)rights);
  set_mr (5, (word_t)badge);
  set_cap (0, src_root);
  message_info_t _info = new_message_info (METHOD_CNode_Mint, 0, 1, 6);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_CNode_Revoke (cptr_t obj, word_t index, uint8_t depth)
{
  set_mr (0, (word_t)index);
  set_mr (1, (word_t)depth);

  message_info_t _info = new_message_info (METHOD_CNode_Revoke, 0, 0, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_CNode_DebugPrint (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_CNode_DebugPrint, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_Configure (cptr_t obj, word_t fault_ep, cptr_t cspace_root,
                   word_t cspace_root_data, cptr_t vspace_root,
                   word_t vspace_root_data, word_t buffer, cptr_t buffer_frame)
{
  set_mr (0, (word_t)fault_ep);
  set_mr (1, (word_t)cspace_root_data);
  set_mr (2, (word_t)vspace_root_data);
  set_mr (3, (word_t)buffer);
  set_cap (0, cspace_root);
  set_cap (1, vspace_root);
  set_cap (2, buffer_frame);
  message_info_t _info = new_message_info (METHOD_TCB_Configure, 0, 3, 4);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_CopyRegisters (cptr_t obj, cptr_t source, bool suspend_source,
                       bool resume_target, bool transfer_frame,
                       bool transfer_integer, word_t arch_flags)
{
  set_mr (0, (word_t)suspend_source);
  set_mr (1, (word_t)resume_target);
  set_mr (2, (word_t)transfer_frame);
  set_mr (3, (word_t)transfer_integer);
  set_mr (4, (word_t)arch_flags);
  set_cap (0, source);
  message_info_t _info = new_message_info (METHOD_TCB_CopyRegisters, 0, 1, 5);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_ReadRegisters (cptr_t obj, bool suspend_source, word_t arch_flags,
                       word_t count, user_context_t *regs)
{
  set_mr (0, (word_t)suspend_source);
  set_mr (1, (word_t)arch_flags);
  set_mr (2, (word_t)count);
  set_mr (3, (word_t)regs);

  message_info_t _info = new_message_info (METHOD_TCB_ReadRegisters, 0, 0, 4);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_Resume (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_TCB_Resume, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_BindNotification (cptr_t obj, cptr_t notification)
{

  set_cap (0, notification);
  message_info_t _info
      = new_message_info (METHOD_TCB_BindNotification, 0, 1, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_SetAffinity (cptr_t obj, word_t affinity)
{
  set_mr (0, (word_t)affinity);

  message_info_t _info = new_message_info (METHOD_TCB_SetAffinity, 0, 0, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_SetIPCBuffer (cptr_t obj, word_t buffer, cptr_t buffer_frame)
{
  set_mr (0, (word_t)buffer);
  set_cap (0, buffer_frame);
  message_info_t _info = new_message_info (METHOD_TCB_SetIPCBuffer, 0, 1, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_SetSpace (cptr_t obj, word_t fault_ep, cptr_t cspace_root,
                  word_t cspace_root_data, cptr_t vspace_root,
                  word_t vspace_root_data)
{
  set_mr (0, (word_t)fault_ep);
  set_mr (1, (word_t)cspace_root_data);
  set_mr (2, (word_t)vspace_root_data);
  set_cap (0, cspace_root);
  set_cap (1, vspace_root);
  message_info_t _info = new_message_info (METHOD_TCB_SetSpace, 0, 2, 3);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_SetTLSBase (cptr_t obj, word_t tls_base)
{
  set_mr (0, (word_t)tls_base);

  message_info_t _info = new_message_info (METHOD_TCB_SetTLSBase, 0, 0, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_Suspend (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_TCB_Suspend, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_TCB_WriteRegisters (cptr_t obj, bool resume_target, word_t arch_flags,
                        word_t count, user_context_t *regs)
{
  set_mr (0, (word_t)resume_target);
  set_mr (1, (word_t)arch_flags);
  set_mr (2, (word_t)count);
  set_mr (3, (word_t)regs);

  message_info_t _info = new_message_info (METHOD_TCB_WriteRegisters, 0, 0, 4);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_Untyped_Retype (cptr_t obj, word_t type, word_t size_bits, cptr_t root,
                    word_t node_index, uint8_t node_depth, word_t node_offset,
                    word_t num_objects)
{
  set_mr (0, (word_t)type);
  set_mr (1, (word_t)size_bits);
  set_mr (2, (word_t)node_index);
  set_mr (3, (word_t)node_depth);
  set_mr (4, (word_t)node_offset);
  set_mr (5, (word_t)num_objects);
  set_cap (0, root);
  message_info_t _info = new_message_info (METHOD_Untyped_Retype, 0, 1, 6);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_In8 (cptr_t obj, word_t port)
{
  set_mr (0, (word_t)port);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_In8, 0, 0, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_In16 (cptr_t obj, word_t port)
{
  set_mr (0, (word_t)port);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_In16, 0, 0, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_In32 (cptr_t obj, word_t port)
{
  set_mr (0, (word_t)port);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_In32, 0, 0, 1);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_Out8 (cptr_t obj, word_t port, word_t value)
{
  set_mr (0, (word_t)port);
  set_mr (1, (word_t)value);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_Out8, 0, 0, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_Out16 (cptr_t obj, word_t port, word_t value)
{
  set_mr (0, (word_t)port);
  set_mr (1, (word_t)value);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_Out16, 0, 0, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPort_Out32 (cptr_t obj, word_t port, word_t value)
{
  set_mr (0, (word_t)port);
  set_mr (1, (word_t)value);

  message_info_t _info = new_message_info (METHOD_X86_IOPort_Out32, 0, 0, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_IOPortControl_Issue (cptr_t obj, word_t first_port, word_t last_port,
                             cptr_t root, word_t index, uint8_t depth)
{
  set_mr (0, (word_t)first_port);
  set_mr (1, (word_t)last_port);
  set_mr (2, (word_t)index);
  set_mr (3, (word_t)depth);
  set_cap (0, root);
  message_info_t _info
      = new_message_info (METHOD_X86_IOPortControl_Issue, 0, 1, 4);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_64_PDPT_Map (cptr_t obj, cptr_t vspace, word_t vaddr,
                     X86_VMAttributes_t attr)
{
  set_mr (0, (word_t)vaddr);
  set_mr (1, (word_t)attr);
  set_cap (0, vspace);
  message_info_t _info = new_message_info (METHOD_X86_64_PDPT_Map, 0, 1, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_64_PDPT_Unmap (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_X86_64_PDPT_Unmap, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_PD_Map (cptr_t obj, cptr_t vspace, word_t vaddr,
                X86_VMAttributes_t attr)
{
  set_mr (0, (word_t)vaddr);
  set_mr (1, (word_t)attr);
  set_cap (0, vspace);
  message_info_t _info = new_message_info (METHOD_X86_PD_Map, 0, 1, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_PD_Unmap (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_X86_PD_Unmap, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_PT_Map (cptr_t obj, cptr_t vspace, word_t vaddr,
                X86_VMAttributes_t attr)
{
  set_mr (0, (word_t)vaddr);
  set_mr (1, (word_t)attr);
  set_cap (0, vspace);
  message_info_t _info = new_message_info (METHOD_X86_PT_Map, 0, 1, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_PT_Unmap (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_X86_PT_Unmap, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_Page_Map (cptr_t obj, cptr_t vspace, word_t vaddr,
                  X86_VMAttributes_t attr)
{
  set_mr (0, (word_t)vaddr);
  set_mr (1, (word_t)attr);
  set_cap (0, vspace);
  message_info_t _info = new_message_info (METHOD_X86_Page_Map, 0, 1, 2);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_X86_Page_Unmap (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_X86_Page_Unmap, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_IRQControl_get (cptr_t obj, word_t irq, cptr_t root, word_t index,
                    uint8_t depth)
{
  set_mr (0, (word_t)irq);
  set_mr (1, (word_t)index);
  set_mr (2, (word_t)depth);
  set_cap (0, root);
  message_info_t _info = new_message_info (METHOD_IRQControl_get, 0, 1, 3);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_IRQHandler_Ack (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_IRQHandler_Ack, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_IRQHandler_Clear (cptr_t obj)
{

  message_info_t _info = new_message_info (METHOD_IRQHandler_Clear, 0, 0, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
static inline int
ubm_IRQHandler_SetNotification (cptr_t obj, cptr_t notification)
{

  set_cap (0, notification);
  message_info_t _info
      = new_message_info (METHOD_IRQHandler_SetNotification, 0, 1, 0);
  message_info_t _result = __call_kernel (obj, _info);
  return get_message_label (_result);
}
